@page "/"
@using System.ComponentModel
@using ChatAppSales.Entities
@inject IChatClient ChatClient
@inject NavigationManager Nav
@inject IMetricsService MetricsService
@implements IDisposable

<PageTitle>Chat</PageTitle>

<ChatHeader OnNewChat="@ResetConversationAsync" />

<ChatMessageList Messages="@messages" InProgressMessage="@currentResponseMessage">
    <NoMessagesContent>
        <div>To get started, try asking about these example documents. You can replace these with your own data and replace this message.</div>
        <ChatCitation File="Example_Emergency_Survival_Kit.pdf" />
        <ChatCitation File="Example_GPS_Watch.pdf" />
    </NoMessagesContent>
</ChatMessageList>

<div class="chat-container">
    <ChatSuggestions OnSelected="@AddUserMessageAsync" @ref="@chatSuggestions" />
    <ChatInput OnSend="@AddUserMessageAsync" @ref="@chatInput" />
    <SurveyPrompt /> @* Remove this line to eliminate the template survey message *@
</div>

@code {
    private const string SystemPrompt = @"
You are an S&OP analytics assistant for company sales data.

### Core Rules:
- Answer only using the tools provided. Never guess numbers or fabricate data.
- For numeric questions, always call the most appropriate tool and pass correct filters (customer, country, year, quarter).
- When user mentions 'this year' or 'last year', resolve them to numeric years based on the current calendar year
  (thisYear = current year, lastYear = current year - 1). Always pass these numbers in tool parameters.
- Format answers for executives:
  - First line: concise, insight-driven summary (mention years explicitly: e.g., 2025 vs 2024)
  - If multiple rows are returned, render a small markdown table
  - End with _Data as of: YYYY-MM-DD_
- Format numbers with thousands separators and percentages with two decimals.
- If customer is missing but needed, ask: “Which customer should I use?”
- If the user asks about stock price, ticker, or market cap, call the stock tool.
- If no customer/country is specified, return company-wide data.

### Tool Selection:
- **YoY Comparison (Totals)** → GetCustomerYoYTotalsAsync
- **YoY Comparison (Monthly)** → GetCustomerYoYMonthlyAsync
- **Budget vs Actual / Variance** → GetBudgetVsActualAsync
- **Forecast Accuracy / MAPE / Bias** → GetForecastAccuracyAsync
- **Top Materials / Products by Revenue** → GetTopMaterialsAsync
- **Top Customers / Pareto / Market Share** → GetTopCustomersAsync
- **Customer Analysis (YoY + Budget Gap + MAPE + Top Materials)** → GetCustomerAnalysisAsync
- **Customer Directory / Search** → ListCustomersAsync
- **Stock Price Lookup** → GetCustomerStockLiveAsync (pass customer name, and optional country/exchange if known)

### Filters:
- If two years are mentioned (e.g., “2025 vs 2024”), pass both as yearThis and yearLast.
- If one year is given, pass it as yearThis and leave yearLast empty (service will infer last year).
- If no year is given, omit both years (backend will anchor to latest year).
- Pass quarter if the user says 'Q1', 'Q2', 'Q3', 'Q4', 'this quarter', or 'last quarter'.

### Example Tool Calls:
User: Monthly YoY breakdown for 2025 vs 2024 for Colombo Superstores
Assistant (tool): GetCustomerYoYMonthlyAsync(customer='Colombo Superstores', yearThis=2025, yearLast=2024)

User: Show me Budget vs Actual for Atlas Retail Group in Q3 2025
Assistant (tool): GetBudgetVsActualAsync(customer='Atlas Retail Group', year=2025, quarter=3)

User: What is forecast accuracy for Germany this year?
Assistant (tool): GetForecastAccuracyAsync(country='Germany', year=2025)

User: Top 5 materials by revenue for India in Q2 2025
Assistant (tool): GetTopMaterialsAsync(country='India', year=2025, quarter=2, topN=5)

User: Customer analysis for Colombo Superstores 2025 vs 2024
Assistant (tool): GetCustomerAnalysisAsync(customer='Colombo Superstores', yearThis=2025, yearLast=2024, topN=5)

User: List all customers in Sri Lanka
Assistant (tool): ListCustomersAsync(country='Sri Lanka')

User: What is the stock price of Colombo Superstores?
Assistant (tool): GetCustomerStockLiveAsync(customer='Colombo Superstores')
";



    private readonly ChatOptions chatOptions = new();
    private readonly List<ChatMessage> messages = new();
    private CancellationTokenSource? currentResponseCancellation;
    private ChatMessage? currentResponseMessage;
    private ChatInput? chatInput;
    private ChatSuggestions? chatSuggestions;

    protected override void OnInitialized()
    {
        messages.Add(new(ChatRole.System, SystemPrompt));
        chatOptions.Tools = [
            AIFunctionFactory.Create(GetCustomerYoYMonthlyAsync),
        AIFunctionFactory.Create(GetCustomerYoYTotalsAsync),
        AIFunctionFactory.Create(GetTopMaterialsAsync),
         AIFunctionFactory.Create(GetBudgetVsActualAsync),
        AIFunctionFactory.Create(GetForecastAccuracyAsync),
        AIFunctionFactory.Create(GetTopCustomersAsync),
        AIFunctionFactory.Create(ListCustomersAsync)];
;
    }

    private async Task AddUserMessageAsync(ChatMessage userMessage)
    {
        CancelAnyCurrentResponse();

        // Add the user message to the conversation
        messages.Add(userMessage);

        // Year hints (non-user-visible helper message that LLM can read)
        var (yearThis, yearLast) = ExtractYears(userMessage.Text ?? "");
        if (yearThis is not null || yearLast is not null)
        {
            messages.Add(new ChatMessage(
                ChatRole.System,
                $"[HINT] yearThis={yearThis?.ToString() ?? "null"}, yearLast={yearLast?.ToString() ?? "null"}"
            ));
        }

        chatSuggestions?.Clear();
        await chatInput!.FocusAsync();

        // Stream and display a new response from the IChatClient
        var responseText = new TextContent("");
        currentResponseMessage = new ChatMessage(ChatRole.Assistant, [responseText]);
        currentResponseCancellation = new();
        await foreach (var update in ChatClient.GetStreamingResponseAsync([.. messages], chatOptions, currentResponseCancellation.Token))
        {
            messages.AddMessages(update, filter: c => c is not TextContent);
            responseText.Text += update.Text;
            ChatMessageItem.NotifyChanged(currentResponseMessage);
        }

        // Store the final response in the conversation, and begin getting suggestions
        messages.Add(currentResponseMessage!);
        currentResponseMessage = null;
        //chatSuggestions?.Update(messages);
    }

    private void CancelAnyCurrentResponse()
    {
        // If a response was cancelled while streaming, include it in the conversation so it's not lost
        if (currentResponseMessage is not null)
        {
            messages.Add(currentResponseMessage);
        }

        currentResponseCancellation?.Cancel();
        currentResponseMessage = null;
    }

    private async Task ResetConversationAsync()
    {
        CancelAnyCurrentResponse();
        messages.Clear();
        messages.Add(new(ChatRole.System, SystemPrompt));
        chatSuggestions?.Clear();
        await chatInput!.FocusAsync();
    }

    private static (int? thisY, int? lastY) ExtractYears(string text)
    {
        if (string.IsNullOrWhiteSpace(text))
            return (null, null);

        var lower = text.ToLowerInvariant();

        // 1) Determine anchor year (current year or override)
        var anchorYear = DateTime.UtcNow.Year; // or use max year from DB if you prefer

        int? thisYear = null;
        int? lastYear = null;

        // 2) Detect explicit 20xx years first
        var matches = System.Text.RegularExpressions.Regex.Matches(text, @"\b(20\d{2})\b");
        var years = matches.Select(m => int.Parse(m.Value))
                           .Distinct()
                           .OrderBy(y => y)
                           .ToArray();

        if (years.Length >= 2)
        {
            // Two or more explicit years: take max as thisYear, previous as lastYear
            thisYear = years[^1];
            lastYear = years[^2];
        }
        else if (years.Length == 1)
        {
            thisYear = years[0];
        }

        // 3) Detect relative phrases ("this year", "last year")
        if (lower.Contains("this year"))
        {
            thisYear ??= anchorYear;
            lastYear ??= thisYear - 1;
        }
        if (lower.Contains("last year"))
        {
            lastYear ??= anchorYear - 1;
            thisYear ??= lastYear + 1;
        }

        // 4) Ensure ordering: thisYear >= lastYear
        if (thisYear is not null && lastYear is not null && lastYear > thisYear)
        {
            (thisYear, lastYear) = (lastYear, thisYear);
        }

        return (thisYear, lastYear);
    }



    [Description("Month-by-month YoY revenue for a customer between two years.")]
    private Task<YoYResponse> GetCustomerYoYMonthlyAsync(
    [Description("Customer name (exact).")] string customer,
    [Description("Target/current year (e.g., 2025).")] int? yearThis = null,
    [Description("Comparison/previous year (e.g., 2024).")] int? yearLast = null,
    CancellationToken ct = default)
    => MetricsService.GetCustomerYoYByMonthAsync(customer, yearThis, yearLast, ct);

    [Description("Totals-only YoY revenue for a customer between two years.")]
    private Task<YoYTotalsResponse> GetCustomerYoYTotalsAsync(
        [Description("Customer name (exact).")] string customer,
        [Description("Target/current year (e.g., 2025).")] int? yearThis = null,
        [Description("Comparison/previous year (e.g., 2024).")] int? yearLast = null,
        CancellationToken ct = default)
        => MetricsService.GetCustomerYoYTotalsAsync(customer, yearThis, yearLast, ct);

    [Description("Returns top-N materials by revenue for the given year/quarter and optional filters.")]
    private Task<IReadOnlyList<TopMaterialRow>> GetTopMaterialsAsync(
string? customer = null, string? country = null, int? year = null, int? quarter = null, int topN = 10, CancellationToken ct = default)
=> MetricsService.GetTopMaterialsAsync(customer, country, year, quarter, topN, ct);


    // Budget vs Actual
    [Description("Returns Budget vs Actual (variance) for optional customer/country filters, by year/quarter.")]
    private Task<BudgetVarianceResponse> GetBudgetVsActualAsync(
        [Description("Exact customer name (optional).")] string? customer = null,
        [Description("Country filter (optional).")] string? country = null,
        [Description("Calendar year (optional, defaults to latest).")] int? year = null,
        [Description("Quarter 1-4 (optional).")] int? quarter = null,
        CancellationToken ct = default)
        => MetricsService.GetBudgetVsActualAsync(customer, country, year, quarter, ct);

    // Forecast Accuracy
    [Description("Returns forecast accuracy metrics (MAPE and Bias) for optional customer/country filters, by year/quarter.")]
    private Task<ForecastAccuracyResponse> GetForecastAccuracyAsync(
        [Description("Exact customer name (optional).")] string? customer = null,
        [Description("Country filter (optional).")] string? country = null,
        [Description("Calendar year (optional, defaults to latest).")] int? year = null,
        [Description("Quarter 1-4 (optional).")] int? quarter = null,
        CancellationToken ct = default)
        => MetricsService.GetForecastAccuracyAsync(customer, country, year, quarter, ct);

    [Description("Returns top-N customers ranked by revenue, with optional country/year/quarter filters.")]
    private Task<IReadOnlyList<TopCustomerRow>> GetTopCustomersAsync(
[Description("Country filter (optional).")] string? country = null,
[Description("Calendar year (optional).")] int? year = null,
[Description("Quarter 1-4 (optional).")] int? quarter = null,
[Description("Number of customers to return. Default = 10.")] int topN = 10,
CancellationToken ct = default)
=> MetricsService.GetTopCustomersAsync(country, year, quarter, topN, ct);

    [Description("Lists customers from the master table. Supports search, country filter, and pagination.")]
    private Task<IReadOnlyList<CustomerListRow>> ListCustomersAsync(
        [Description("Search text to match name/KAM/AAM (optional).")] string? search = null,
        [Description("Exact country filter (optional).")] string? country = null,
        CancellationToken ct = default)
        => MetricsService.GetCustomersAsync(search, country, ct);


    public void Dispose()
        => currentResponseCancellation?.Cancel();
}
